<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.daniloarcidiacono.test.ci</groupId>
    <artifactId>test-circle-ci</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>CI test project</name>
    <description>CI test project</description>
    <url>http://github.com/daniloarcidiacono/test-circle-ci</url>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Danilo Arcidiacono</name>
            <email>danilo.arcidiacono@gmail.com</email>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git@github.com:daniloarcidiacono/test-circle-ci.git</connection>
        <developerConnection>scm:git:git@github.com:daniloarcidiacono/test-circle-ci.git</developerConnection>
        <url>https://github.com/daniloarcidiacono/test-circle-ci.git</url>
    </scm>

    <issueManagement>
        <url>https://github.com/daniloarcidiacono/test-circle-ci</url>
    </issueManagement>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>

        <!-- Dependencies -->
        <junit.bom.version>5.2.0</junit.bom.version>
        <junit.platform.version>1.2.0</junit.platform.version>

        <!-- Plugins -->
        <maven-compiler.plugin.version>3.7.0</maven-compiler.plugin.version>
        <maven-surefire.plugin.version>2.22.0</maven-surefire.plugin.version>
        <maven-source.plugin.version>3.0.1</maven-source.plugin.version>
        <versions-maven.plugin.version>2.7</versions-maven.plugin.version>
        <jacoco.plugin.version>0.8.2</jacoco.plugin.version>
        <pgpverify-maven.plugin.version>1.3.0</pgpverify-maven.plugin.version>

        <!-- Constraints -->
        <!-- Note we use 2 d.p so that we get can any check failure messages reported to 2 d.p. -->
        <line.coverage.ratio>0.80</line.coverage.ratio>
        <branch.coverage.ratio>0.80</branch.coverage.ratio>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.bom.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>docs</id>
            <properties>
                <!-- Plugin -->
                <maven-javadoc.plugin.version>2.10.4</maven-javadoc.plugin.version>
                <asciidoctor-maven.plugin.version>1.5.6</asciidoctor-maven.plugin.version>
                <asciidoctorj.pdf.version>1.5.0-alpha.16</asciidoctorj.pdf.version>
            </properties>
            <build>
                <plugins>
                    <!-- Export Javadoc -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${maven-javadoc.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- AsciiDoc -->
                    <plugin>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>${asciidoctor-maven.plugin.version}</version>
                        <dependencies>
                            <dependency>
                                <groupId>org.asciidoctor</groupId>
                                <artifactId>asciidoctorj-pdf</artifactId>
                                <version>${asciidoctorj.pdf.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <sourceDirectory>src/docs/asciidoc</sourceDirectory>
                            <outputDirectory>target/docs/asciidoc</outputDirectory>
                            <backend>html5</backend>
                            <sourceHighlighter>coderay</sourceHighlighter>
                            <doctype>book</doctype>
                            <attributes>
                                <imagesdir>./images</imagesdir>
                                <toc>left</toc>
                                <sectnums>true</sectnums>
                                <sectanchors>true</sectanchors>
                                <revnumber>${project.version}</revnumber>
                                <revdate>${maven.build.timestamp}</revdate>
                                <organization>${project.organization.name}</organization>
                                <sourcedir>${project.build.sourceDirectory}</sourcedir>
                                <project-version>${project.version}</project-version>
                                <icons>font</icons>
                                <allow-uri-read/>
                            </attributes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>output-html</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>ossrh</id>
            <distributionManagement>
                <snapshotRepository>
                    <id>ossrh</id>
                    <url>https://oss.sonatype.org/content/repositories/snapshots</url>
                </snapshotRepository>
                <repository>
                    <id>ossrh</id>
                    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
                </repository>
            </distributionManagement>
            <properties>
                <!-- Plugins -->
                <nexus-staging-maven.plugin.version>1.6.8</nexus-staging-maven.plugin.version>
                <maven-gpg.plugin.version>1.6</maven-gpg.plugin.version>
            </properties>
            <build>
                <plugins>
                    <!-- GPG signatures -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>${maven-gpg.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <!-- This is necessary for gpg to not try to use the pinentry programs -->
                                    <!--  this solution only works on gnupg 2.1.x. 2.0.x doesn't recognize the -pinentry-mode  -->
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        The maven-deploy-plugin is a viable option to handle the task of deploying to artifacts of a project to
                        Nexus, but it was not built to take full advantage of what Nexus has to offer.
                        Because of that fact, Sonatype built a Nexus specific plugin – the nexus-staging-maven-plugin –
                        that is actually designed to take full advantage of the more advanced functionality that Nexus has to
                        offer – functionality such as staging.

                        The only reason to use the maven-deploy-plugin is to keep open the option of using an alternative to Nexus in
                        the future – for example, an Artifactory repository. However, unlike other components that may actually change
                        throughout the lifecycle of a project, the Maven Repository Manager is highly unlikely to change,
                        so that flexibility is not required.

                        So, the first step in using another deployment plugin in the deploy phase is to disable the existing, default
                        mapping:
                    -->
                    <plugin>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <version>${nexus-staging-maven.plugin.version}</version>
                        <extensions>true</extensions>
                        <configuration>
                            <serverId>ossrh</serverId>
                            <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                            <!--<autoReleaseAfterClose>true</autoReleaseAfterClose>-->
                            <!--<autoDropAfterRelease>true</autoDropAfterRelease>-->
                            <!--
                                If true, will not locally stage. This triggers basically equivalent
                                behaviour to maven-deploy-plugin, each deploy will happen "directly",
                                at the end of the each module build.
                            -->
                            <!--<skipLocalStaging>true</skipLocalStaging>-->
                        </configuration>
                        <executions>
                            <execution>
                                <id>deploy-to-sonatype</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>deploy</goal>
                                    <!--<goal>close</goal>-->
                                    <!--<goal>release</goal>-->
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <plugins>
            <!-- Compiler -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- Export sources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source.plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Test runner -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire.plugin.version}</version>

                <!--

                    Workaround to run tests with OpenJDK 8

                        Could not find or load main class org.apache.maven.surefire.booter.ForkedBooter

                    https://stackoverflow.com/questions/53010200/maven-surefire-could-not-find-forkedbooter-class
                    https://issues.apache.org/jira/browse/SUREFIRE-1588

                    Also note that version 2.22.0 of surefire plugin is needed, which provides native support for JUnit Platform:

                        Could not find or load main class org.apache.maven.plugin.surefire.log.api.ConsoleLogger

                    https://github.com/junit-team/junit5/issues/1367
                -->
                <configuration>
                    <useSystemClassLoader>false</useSystemClassLoader>
                </configuration>
            </plugin>

            <!-- Test coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.plugin.version}</version>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>

                    <execution>
                        <id>default-report</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>

                    <!--
                        The check goal by default runs in the verify phase,
                        we want to fail the build if mimimum code coverage checks aren't met.
                    -->
                    <execution>
                        <id>default-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <!-- Constraint on line and branch coverage of all classes -->
                                <rule>
                                    <element>CLASS</element>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>${line.coverage.ratio}</minimum>
                                        </limit>
                                        <limit>
                                            <counter>BRANCH</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>${branch.coverage.ratio}</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Versioning -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions-maven.plugin.version}</version>
            </plugin>

            <!-- Signatures verification -->
            <plugin>
                <groupId>org.simplify4u.plugins</groupId>
                <artifactId>pgpverify-maven-plugin</artifactId>
                <version>${pgpverify-maven.plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>